name: Static Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p reports
      # ======================
      # React (web) - ESLint
      # ======================
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache frontend node_modules
        uses: actions/cache@v4
        with:
          path: web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('web/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install web dependencies
        run: |
          cd web
          npm install
          npm install @microsoft/eslint-formatter-sarif --save-dev

      - name: Run ESLint and output SARIF
        run: |
          cd web
          npx eslint . --format=@microsoft/eslint-formatter-sarif --output-file=../reports/eslint-results.sarif || true
      
      - name: Debug ESLint Output
        run: cat reports/eslint-results.sarif || echo "No SARIF report generated"

      - name: Upload ESLint SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/eslint-results.sarif

      # ======================
      # Python (backend) - Flake8 + Bandit
      # ======================
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install Python tools
        run: |
          pip install flake8 bandit flake8-sarif

      - name: Run Flake8
        run: |
          mkdir -p reports
          flake8 backend/ --format sarif --output-file reports/flake8-results.sarif

      - name: Run Bandit (JSON)
        run: |
          bandit -r backend/ -f json -o reports/bandit-results.json

      - name: Add Bandit JSON to SARIF converter
        run: |
          cat << 'EOF' > bandit_json_to_sarif.py
          import json
          import sys

          BANDIT_SEVERITY_TO_SARIF_LEVEL = {
              "LOW": "note",
              "MEDIUM": "warning",
              "HIGH": "error"
          }

          def convert_bandit_to_sarif(input_file, output_file):
              with open(input_file, 'r') as f:
                  bandit_data = json.load(f)

              sarif = {
                  "version": "2.1.0",
                  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "Bandit",
                              "informationUri": "https://bandit.readthedocs.io",
                              "version": bandit_data.get("meta", {}).get("bandit_version", "unknown"),
                              "rules": []
                          }
                      },
                      "results": []
                  }]
              }

              rule_ids = set()

              for issue in bandit_data.get("results", []):
                  rule_id = issue["test_id"]
                  if rule_id not in rule_ids:
                      rule_ids.add(rule_id)
                      sarif["runs"][0]["tool"]["driver"]["rules"].append({
                          "id": rule_id,
                          "name": issue.get("test_name", ""),
                          "shortDescription": {
                              "text": issue.get("issue_text", "")
                          },
                          "helpUri": issue.get("more_info", "")
                      })

                  sarif["runs"][0]["results"].append({
                      "ruleId": rule_id,
                      "level": BANDIT_SEVERITY_TO_SARIF_LEVEL.get(issue.get("issue_severity", "LOW").upper(), "note"),
                      "message": {
                          "text": issue.get("issue_text", "")
                      },
                      "locations": [{
                          "physicalLocation": {
                              "artifactLocation": {
                                  "uri": issue["filename"]
                              },
                              "region": {
                                  "startLine": issue["line_number"]
                              }
                          }
                      }]
                  })

              with open(output_file, 'w') as f:
                  json.dump(sarif, f, indent=2)

              print(f"✅ Converted {input_file} → {output_file}")

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Usage: python bandit_json_to_sarif.py <input_json> <output_sarif>")
                  sys.exit(1)

              convert_bandit_to_sarif(sys.argv[1], sys.argv[2])
          EOF

      - name: Convert Bandit JSON to SARIF
        run: |
          python bandit_json_to_sarif.py reports/bandit-results.json reports/bandit-results.sarif

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/bandit-results.sarif
      
      - name: Upload Flake8 SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/flake8-results.sarif
