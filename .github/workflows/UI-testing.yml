# .github/workflows/UI-testing.yml
name: UI TEST

on:
#   push:
#   pull_request:
    workflow_dispatch: {}  # Allows manual triggering of the workflow
    workflow_run:
        workflows: ["Unit Testing"]
        types:
        - completed

jobs:
    e2e:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Docker Compose
                uses: docker/setup-buildx-action@v2
    
            -   name: Create .env from secrets
                run: |
                    cat <<-EOF > .env
                    FLASK_RUN_HOST=${{ secrets.FLASK_RUN_HOST }}
                    FLASK_RUN_PORT=${{ secrets.FLASK_RUN_PORT }}
                    FLASK_SECRET=${{ secrets.FLASK_SECRET }}
                    VITE_HCAPTCHA_SITEKEY=${{ secrets.VITE_HCAPTCHA_SITEKEY }}
                    MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD_DEV }}
                    MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE_DEV }}
                    MYSQL_USER=${{ secrets.MYSQL_USER_DEV }}
                    MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD_DEV }}
                    FERNET_KEY=${{ secrets.FERNET_KEY }}
                    JWT_SECRET=${{ secrets.JWT_SECRET }}
                    HCAPTCHA_SECRET=${{ secrets.HCAPTCHA_SECRET }}
                    AES_GCM_KEY=${{ secrets.AES_GCM_KEY }}
                    ENCRYPTED_TOTP_SECRET=${{ secrets.ENCRYPTED_TOTP_SECRET }}
                    EOF

            -   name: Create .env.dev from secrets
                run: |
                    cat <<-EOF > .env.dev
                    MYSQL_REMOTE_PORT=${{ secrets.MYSQL_REMOTE_PORT }}
                    FLASK_DEBUG=${{ secrets.FLASK_DEBUG_DEV }}
                    USE_SSH_TUNNEL=${{ secrets.USE_SSH_TUNNEL_DEV }}
                    SSH_HOST=${{ secrets.SSH_HOST }}
                    SSH_PORT=${{ secrets.SSH_PORT }}
                    SSH_USER=${{ secrets.SSH_USER }}
                    PEM_FILE=${{ secrets.PEM_FILE }}
                    
                    EOF

            -   name: Create firebase json file from secrets
                run: |
                    cat <<-EOF > connectit-63f60-firebase-adminsdk-fbsvc-c106a0e591.json
                    ${{
                        secrets.FIREBASE_SECRET_JSON
                    }}
                    
                    EOF

            -   name: Inspect workspace after env creation
                run: |
                    echo "📂 Current working directory: $(pwd)"
                    echo "🗂️  Files at repo root:"
                    ls -al
                    echo ""
                    echo "🗂️  Does .env exist?"
                    [ -f .env ] && echo "✅ .env found" || echo "❌ .env missing"
                    echo "🗂️  Does .env.dev exist?"
                    [ -f .env.dev ] && echo "✅ .env.dev found" || echo "❌ .env.dev missing"
                    echo ""
                    echo "🗂️  Contents of web/ directory:"
                    ls -al web


            -   name: Install SSH key
                run: |
                    mkdir -p ~/.ssh
                    echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ICT2216-student12.pem
                    chmod 600 ~/.ssh/ICT2216-student12.pem



            -   name: Bring up containers
                run: |
                    docker compose up -d

            # Wait for your front-end (if you run it in Docker too)
            -   name: Wait for frontend
                run: |
                    for i in $(seq 1 20); do
                        curl --fail http://localhost:5173/ && break
                        echo "Waiting for frontend..."
                        sleep 1
                    done

            -   name: Print backend logs
                run: sudo docker logs backend
            -   name: Print frontend logs
                run: sudo docker logs web-prod

            -   name: Fix permissions on web/
                run: sudo chown -R $USER:$USER ./web

            -   name: Install Playwright deps
                working-directory: web
                run: |
                    npm ci
                    npx playwright install --with-deps

            -   name: Run E2E tests
                working-directory: web
                run: npx playwright test --config=playwright.config.ts

            -   name: Upload Playwright HTML report
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: playwright-report
                    path: web/playwright-report

            -   name: Upload Playwright screenshots
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: playwright-screenshots
                    path: web/test-results/screenshots

            -   name: Tear down
                if: always()
                run: docker compose down
