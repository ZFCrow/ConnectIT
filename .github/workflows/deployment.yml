# .github/workflows/UI-testing.yml
name: Build-IntegrationTest-Deployment

on:
#   push:
#   pull_request:
    workflow_dispatch: {}  # Allows manual triggering of the workflow
    workflow_run:
        workflows: ["Unit Testing"]
        types:
        - completed

jobs:

    Build-and-integration-test:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Docker Compose
                uses: docker/setup-buildx-action@v2
    
            -   name: Create .env from secrets
                run: |
                    cat <<-EOF > .env
                    FLASK_RUN_HOST=${{ secrets.FLASK_RUN_HOST }}
                    FLASK_RUN_PORT=${{ secrets.FLASK_RUN_PORT }}
                    FLASK_SECRET=${{ secrets.FLASK_SECRET }}
                    VITE_HCAPTCHA_SITEKEY=${{ secrets.VITE_HCAPTCHA_SITEKEY }}
                    MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD_DEV }}
                    MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE_DEV }}
                    MYSQL_USER=${{ secrets.MYSQL_USER_DEV }}
                    MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD_DEV }}
                    FERNET_KEY=${{ secrets.FERNET_KEY }}
                    JWT_SECRET=${{ secrets.JWT_SECRET }}
                    HCAPTCHA_SECRET=${{ secrets.HCAPTCHA_SECRET }}
                    AES_GCM_KEY=${{ secrets.AES_GCM_KEY }}
                    ENCRYPTED_TOTP_SECRET=${{ secrets.ENCRYPTED_TOTP_SECRET }}
                    EOF

            -   name: Create .env.dev from secrets
                run: |
                    cat <<-EOF > .env.dev
                    MYSQL_REMOTE_PORT=${{ secrets.MYSQL_REMOTE_PORT }}
                    FLASK_DEBUG=${{ secrets.FLASK_DEBUG_DEV }}
                    USE_SSH_TUNNEL=${{ secrets.USE_SSH_TUNNEL_DEV }}
                    SSH_HOST=${{ secrets.SSH_HOST }}
                    SSH_PORT=${{ secrets.SSH_PORT }}
                    SSH_USER=${{ secrets.SSH_USER }}
                    PEM_FILE=${{ secrets.PEM_FILE }}
                    
                    EOF

            -   name: Create firebase json file from secrets
                run: |
                    cat <<-EOF > connectit-63f60-firebase-adminsdk-fbsvc-c106a0e591.json
                    ${{
                        secrets.FIREBASE_SECRET_JSON
                    }}
                    
                    EOF

            -   name: Inspect workspace after env creation
                run: |
                    echo "📂 Current working directory: $(pwd)"
                    echo "🗂️  Files at repo root:"
                    ls -al
                    echo ""
                    echo "🗂️  Does .env exist?"
                    [ -f .env ] && echo "✅ .env found" || echo "❌ .env missing"
                    echo "🗂️  Does .env.dev exist?"
                    [ -f .env.dev ] && echo "✅ .env.dev found" || echo "❌ .env.dev missing"
                    echo ""
                    echo "🗂️  Contents of web/ directory:"
                    ls -al web


            -   name: Install SSH key
                run: |
                    mkdir -p ~/.ssh
                    echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ICT2216-student12.pem
                    chmod 600 ~/.ssh/ICT2216-student12.pem



            -   name: Bring up containers
                run: |
                    docker compose up -d

            # Wait for your front-end (if you run it in Docker too)
            -   name: Wait for frontend
                run: |
                    for i in $(seq 1 20); do
                        curl --fail http://localhost:5173/ && break
                        echo "Waiting for frontend..."
                        sleep 1
                    done

            -   name: Print backend logs
                run: sudo docker logs backend
            -   name: Print frontend logs
                run: sudo docker logs web-prod

            -   name: Fix permissions on web/
                run: sudo chown -R $USER:$USER ./web

            -   name: Install Playwright deps
                working-directory: web
                run: |
                    npm ci
                    npx playwright install --with-deps

            -   name: Run E2E tests
                working-directory: web
                run: npx playwright test --config=playwright.config.ts

            -   name: Upload Playwright HTML report
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: playwright-report
                    path: web/playwright-report

            -   name: Upload Playwright screenshots
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: playwright-screenshots
                    path: web/test-results/screenshots
            

            -   name: Push Docker images
                if: success()
                env: 
                    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }} # Your Docker Hub username 
                    DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # Your Docker Hub token for authentication 
                run: | 
                    echo "→ Logging in to Docker Hub as ${{ secrets.DOCKERHUB_USERNAME }}"
                    docker login docker.io -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

                    echo "→ Pushing images to docker.io"
                    docker compose push

                    echo "✅ Build & push complete"      


            -   name: Tear down
                if: always()
                run: docker compose down


    Deployment: 
        runs-on: ubuntu-latest 
        needs: Build-and-integration-test 

        env: 
            #.env
            FLASK_RUN_HOST: ${{ secrets.FLASK_RUN_HOST }} # Set your Flask run host 
            FLASK_RUN_PORT: ${{ secrets.FLASK_RUN_PORT }} # Set your Flask run port 
            FLASK_SECRET: ${{ secrets.FLASK_SECRET }} # Set your Flask secret key 
            VITE_HCAPTCHA_SITEKEY: ${{ secrets.VITE_HCAPTCHA_SITEKEY }} # Set your hCaptcha site key 
            MYSQL_ROOT_PASSWORD_DEV: ${{ secrets.MYSQL_ROOT_PASSWORD_DEV }} # Set your MySQL root password for development 
            MYSQL_DATABASE_DEV: ${{ secrets.MYSQL_DATABASE_DEV }} # Set your MySQL database name for development 
            MYSQL_USER_DEV: ${{ secrets.MYSQL_USER_DEV }} # Set your MySQL user for development
            MYSQL_PASSWORD_DEV: ${{ secrets.MYSQL_PASSWORD_DEV }} # Set your MySQL password for development 
            FERNET_KEY: ${{ secrets.FERNET_KEY }} # Set your Fernet key for encryption 
            JWT_SECRET: ${{ secrets.JWT_SECRET }} # Set your JWT secret for authentication
            HCAPTCHA_SECRET: ${{ secrets.HCAPTCHA_SECRET }} # Set your hCaptcha secret key 
            AES_GCM_KEY: ${{secrets.AES_GCM_KEY}}
        
            #.env.prod , some keys added a _PROD as it shares the same name as development keys
            MYSQL_ROOT_PASSWORD_PROD: ${{ secrets.MYSQL_ROOT_PASSWORD_PROD }} # Set your MySQL root password for production
            MYSQL_DATABASE_PROD: ${{ secrets.MYSQL_DATABASE_PROD }} # Set your MySQL database name for production
            MYSQL_USER_PROD: ${{ secrets.MYSQL_USER_PROD }} # Set your MySQL user for production
            MYSQL_PASSWORD_PROD: ${{ secrets.MYSQL_PASSWORD_PROD }} # Set your MySQL password for production
            FLASK_DEBUG_PROD: ${{ secrets.FLASK_DEBUG_PROD }} # Set your Flask debug mode for production
            MYSQL_CONTAINER_NAME: ${{ secrets.MYSQL_CONTAINER_NAME }} # Set your MySQL container name for production
            MYSQL_CONTAINER_PORT: ${{ secrets.MYSQL_CONTAINER_PORT }} # Set your MySQL container port for production
            USE_SSH_TUNNEL_PROD: ${{ secrets.USE_SSH_TUNNEL_PROD }} # Set whether to use SSH tunnel for production
            SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
            SPLUNK_SOURCE: ${{ secrets.SPLUNK_SOURCE }} # Set your Splunk source for logging
            SPLUNK_SOURCETYPE: ${{ secrets.SPLUNK_SOURCETYPE }} # Set your Splunk sourcetype for logging 
            SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD }} # Set your Splunk password for logging
            SPLUNK_IP_WHITELIST: ${{ secrets.SPLUNK_IP_WHITELIST }} # Set your Splunk IP whitelist for security 
        
            # FIREBASE secrets 
            FIREBASE_SECRET_JSON: ${{ secrets.FIREBASE_SECRET_JSON }}


            # SSH 
            SSH_HOST: ${{ secrets.SSH_HOST }} # Set your SSH host 
            SSH_PORT: ${{ secrets.SSH_PORT }} # Set your SSH port 
            SSH_USER: ${{ secrets.SSH_USER }} # Set your SSH user 
            EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }} # Your SSH private key stored in GitHub Secrets 

        steps: 

            -   name: Checkout code 
                uses: actions/checkout@v4

            -   name: start SSH agent 
                uses: webfactory/ssh-agent@v0.5.4
                with:
                    ssh-private-key: ${{ secrets.EC2_SSH_KEY }} # Your SSH private key stored in GitHub Secrets 

            -   name: Add EC2 to known hosts 
                run: | 
                    ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 


            -   name: Copy prod compose & nginx script
                run: |
                    scp -o StrictHostKeyChecking=no \
                    docker-compose.prod.yml \
                    nginx-startup.sh \
                    "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/ConnectIT2/"


            # Generate .env files on EC2 
            -   name: Generate .env files on EC2
                run: |
                    ssh -p "${{ secrets.SSH_PORT }}" -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" <<EOF
                    # ─── .env ─────────────────────────────────────
                    cat > /home/$SSH_USER/ConnectIT2/.env <<E1
                    FLASK_RUN_HOST=$FLASK_RUN_HOST
                    FLASK_RUN_PORT=$FLASK_RUN_PORT
                    FLASK_SECRET=$FLASK_SECRET 
                    VITE_HCAPTCHA_SITEKEY=$VITE_HCAPTCHA_SITEKEY
                    MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD_DEV
                    MYSQL_DATABASE=$MYSQL_DATABASE_DEV
                    MYSQL_USER=$MYSQL_USER_DEV
                    MYSQL_PASSWORD=$MYSQL_PASSWORD_DEV          
                    FERNET_KEY=$FERNET_KEY
                    JWT_SECRET=$JWT_SECRET
                    HCAPTCHA_SECRET=$HCAPTCHA_SECRET
                    AES_GCM_KEY=$AES_GCM_KEY
                    E1

                    # ─── connectit-63f60-firebase-adminsdk-fbsvc-c106a0e591.json ───────────(Commented out)──────────────────────
                    cat > /home/$SSH_USER/ConnectIT2/connectit-63f60-firebase-adminsdk-fbsvc-c106a0e591.json <<E2
                    $FIREBASE_SECRET_JSON
                    E2

                    # ─── .env.prod ────────────────────────────────
                    cat > /home/$SSH_USER/ConnectIT2/.env.prod <<E3
                    MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD_PROD
                    MYSQL_DATABASE=$MYSQL_DATABASE_PROD
                    MYSQL_USER=$MYSQL_USER_PROD
                    MYSQL_PASSWORD=$MYSQL_PASSWORD_PROD
                    FLASK_DEBUG=$FLASK_DEBUG_PROD
                    MYSQL_CONTAINER_NAME=$MYSQL_CONTAINER_NAME
                    MYSQL_CONTAINER_PORT=$MYSQL_CONTAINER_PORT
                    USE_SSH_TUNNEL=$USE_SSH_TUNNEL_PROD

                        
                    SPLUNK_HEC_TOKEN=$SPLUNK_HEC_TOKEN
                    SPLUNK_SOURCE=$SPLUNK_SOURCE
                    SPLUNK_SOURCETYPE=$SPLUNK_SOURCETYPE
                    SPLUNK_PASSWORD=$SPLUNK_PASSWORD
                    SPLUNK_IP_WHITELIST=$SPLUNK_IP_WHITELIST 
                    E3
                    EOF

            # docker up 
            -   name: Compose up on EC2 
                run: |
                    ssh -t -p "${{ secrets.SSH_PORT }}" \
                    -o StrictHostKeyChecking=no \
                    "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
                    "cd /home/${{ secrets.SSH_USER }}/ConnectIT2 && \
                    sudo docker system prune --all --volumes --force && \
                    sudo docker builder prune --all --force && \
                    sudo docker compose -f docker-compose.prod.yml pull && \
                    sudo docker compose -f docker-compose.prod.yml up -d"
        
